#include <SDL.h>
#include <SDL_image.h>
#include <iostream>

const int SCREEN_WIDTH = 800;
const int SCREEN_HEIGHT = 600;
const char* WINDOW_TITLE = "Hello World!";

void logErrorAndExit(const char* msg, const char* error)
{
	SDL_LogMessage(SDL_LOG_CATEGORY_APPLICATION, SDL_LOG_PRIORITY_ERROR, "%s: %s", msg, error);
	SDL_Quit();
}


SDL_Window* initSDL(int SCREEN_WIDTH, int SCREEN_HEIGHT, const char* WINDOW_TITLE){
	if (SDL_Init(SDL_INIT_EVERYTHING) != 0)
		logErrorAndExit("SDL_Init", SDL_GetError());

	SDL_Window* window = SDL_CreateWindow(WINDOW_TITLE, SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
	//full screen
	//window = SDL_CreateWindow(WINDOW_TITLE, SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_FULLSCREEN_DESKTOP);
	if (window == nullptr) logErrorAndExit("CreateWindow", SDL_GetError());

	if (!IMG_Init(IMG_INIT_PNG | IMG_INIT_JPG))
		logErrorAndExit("SDL_image error:", IMG_GetError());

	return window;
}

SDL_Renderer* createRenderer(SDL_Window* window)
{
	SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED |
		SDL_RENDERER_PRESENTVSYNC);
	//Khi chạy trong máy ảo (ví dụ phòng máy ở trường)
	//renderer = SDL_CreateSoftwareRenderer(SDL_GetWindowSurface(window));

	if (renderer == nullptr) logErrorAndExit("CreateRenderer", SDL_GetError());

	SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, "linear");
	SDL_RenderSetLogicalSize(renderer, SCREEN_WIDTH, SCREEN_HEIGHT);

	return renderer;
}

void renderTexture(SDL_Texture* texture, int x, int y, SDL_Renderer* renderer) {
	SDL_Rect dest;

	dest.x = x;
	dest.y = y;
	SDL_QueryTexture(texture, NULL, NULL, &dest.w, &dest.h);

	SDL_RenderCopy(renderer, texture, NULL, &dest);
}

SDL_Texture* loadTexture(const char* filename, SDL_Renderer* renderer) {
	SDL_LogMessage(SDL_LOG_CATEGORY_APPLICATION, SDL_LOG_PRIORITY_INFO, "Loading %s", filename);

	SDL_Texture* texture = IMG_LoadTexture(renderer, filename);
	if (texture == NULL)
		SDL_LogMessage(SDL_LOG_CATEGORY_APPLICATION, SDL_LOG_PRIORITY_ERROR, "Load texture %s", IMG_GetError());

	return texture;
}

void imagerotated(SDL_Texture* img, SDL_Renderer* renderer, int x, int y, double angle) {
	SDL_Rect destR = { x, y, 0, 0 };
	SDL_QueryTexture(img, NULL, NULL, &destR.w, &destR.h);
	SDL_Point ss = { destR.w / 2, 0 };
	SDL_RenderCopyEx(renderer, img, NULL, &destR, angle, &ss, SDL_FLIP_NONE);
}

int main(int argc, char* argv[]) {
	SDL_Window* window = initSDL(SCREEN_WIDTH, SCREEN_HEIGHT, WINDOW_TITLE);
	SDL_Renderer* renderer = createRenderer(window);

	SDL_Texture* hook = loadTexture("hook.png", renderer);
	SDL_Event e;
	bool quit = false;
	double angle = 0;
	bool m_direction = true;
	while (!quit) {

		while (SDL_PollEvent(&e)) {

			imagerotated(hook, renderer, SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, angle);

			if (angle == 60) // most left angle
			{
				m_direction = true;
			}
			else if (angle == - 60) // most right angle
			{
				m_direction = false;
			}

			if (m_direction) // move right
			{
				--angle;
			}

			else
			{
				++angle;
			}
			SDL_RenderPresent(renderer);
			SDL_RenderClear(renderer);

			if (e.type == SDL_QUIT) quit = true;
		}

	}


	return 0;
}
